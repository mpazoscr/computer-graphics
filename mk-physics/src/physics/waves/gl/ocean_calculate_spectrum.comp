#version 400

struct Complex
{
  float r;
  float i;
};

struct ComplexPair
{
  Complex x;
  Complex z;
};

Complex add(Complex a, Complex b)
{
  return Complex(a.r + b.r, a.i + b.i);
}

Complex mult(Complex a, Complex b)
{
  return Complex(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}

Complex conjugate(Complex a)
{
  return Complex(a.r, -a.i);
}

Complex eulerExp(float s)
{
  return Complex(cos(s), sin(s));
}

layout (std340, binding = 0) readonly buffer BufferH0
{
  Complex h0[];
};

layout (std340, binding = 1) writeonly buffer BufferSpectrum
{
  Complex spectrum[];
};

layout (std340, binding = 2) writeonly buffer BufferDisp
{
  ComplexPair disp[];
};

layout (std340, binding = 3) writeonly buffer BufferGrad
{
  ComplexPair grad[];
};

uniform vec2 meshSize;
uniform vec2 physicalSize;
uniform float g;
uniform float t;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
  const float kPi = 3.141592653589793;
  const float epsilon = 1e-12f;

  int indexX = gl_GlobalInvocationID.x;
  int indexZ = gl_GlobalInvocationID.y;

  int sizeX = meshSize.x;
  int sizeZ = meshSize.y;

  int lenghtX = physicalSize.x;
  int lenghtZ = physicalSize.y;

  int indexXMirrored = sizeX - indexX - 1;
  int indexZMirrored = sizeZ - indexZ - 1;

  int index = indexZ * sizeX + indexX;
  int indexMirrored = indexZMirrored * sizeX + indexXMirrored;

  float kx = (indexX - sizeX / 2.0f) * (2.0f * kPi / lengthX);
  float kz = (indexZ - sizeZ / 2.0f) * (2.0f * kPi / lengthZ);
  float kLength = sqrt(kx * kx + kz * kz);
  float w = sqrt(gravity * kLength);

  spectrum[index] = add(mult(h0[index], eulerExp(w * t)),
                        mult(conjugate(h0[indexMirrored]), eulerExp(-w * t)));

  grad[index].x = Complex(-kx * spectrum[index].i, kx * spectrum[index].r);
  grad[index].z = Complex(-kz * spectrum[index].i, kz * spectrum[index].r);

  if (kLength > epsilon)
  {
    disp[index].x = Complex(kx / kLength * spectrum[index].i, -kx / kLength * spectrum[index].r);
    disp[index].z = Complex(kz / kLength * spectrum[index].i, -kz / kLength * spectrum[index].r);

    //jxx[index] = Complex(kx * kx / kLength * spectrum[index].r, kx * kx / kLength * spectrum[index].i);
    //jzz[index] = Complex(kz * kz / kLength * spectrum[index].r, kz * kz / kLength * spectrum[index].i);
    //jxz[index] = Complex(kx * kz / kLength * spectrum[index].r, kx * kz / kLength * spectrum[index].i);
  }
  else
  {
    disp[index].x = Complex(0.0f, 0.0f);
    disp[index].z = Complex(0.0f, 0.0f);

    //jxx[index] = Complex(0.0f, 0.0f);
    //jzz[index] = Complex(0.0f, 0.0f);
    //jxz[index] = Complex(0.0f, 0.0f);
  }
}
