#version 430

struct Complex
{
  float r;
  float i;
};

Complex add(Complex a, Complex b)
{
  return Complex(a.r + b.r, a.i + b.i);
}

Complex mult(Complex a, Complex b)
{
  return Complex(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}

Complex conjugate(Complex a)
{
  return Complex(a.r, -a.i);
}

Complex eulerExp(float s)
{
  return Complex(cos(s), sin(s));
}

struct VertexPN
{
  float x, y, z;
  float nx, ny, nz;
};

layout (std430, binding = 0) readonly restrict buffer BufferH
{
  Complex h[];
};

layout (std430, binding = 1) readonly restrict buffer BufferDispX
{
  Complex dispX[];
};

layout (std430, binding = 2) readonly restrict buffer BufferDispZ
{
  Complex dispZ[];
};

layout (std430, binding = 3) writeonly restrict buffer BufferMesh
{
  VertexPN mesh[];
};

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

uniform uvec2 oceanSize;
uniform uvec2 meshSize;
uniform float dispFactor;

void main()
{
  const uint indexX = gl_GlobalInvocationID.x;
  const uint indexZ = gl_GlobalInvocationID.y;

  const uint oceanIndex = indexZ * oceanSize.x + indexX;
  const uint meshIndex = indexZ * meshSize.x + indexX;

  const float sign = (((indexX + indexZ) & 0x01) != 0) ? 1.0f : -1.0f;

  const float x = (indexX - meshSize.x / 2.0f) + dispFactor * sign * dispX[oceanIndex].r;
  const float y = sign * h[oceanIndex].r;
  const float z = (indexZ - meshSize.y / 2.0f) + dispFactor * sign * dispZ[oceanIndex].r;

  mesh[meshIndex].x = x;
  mesh[meshIndex].y = y;
  mesh[meshIndex].z = z;

  // We assign the same values to the corresponding vertices in other tiles

  const uint tilesX = meshSize.x / oceanSize.x;
  const uint tilesY = meshSize.y / oceanSize.y;

  for (uint j = 0; j < tilesY; ++j)
  for (uint i = 0; i < tilesX; ++i)
  {
    const uint tileIndexX = (indexX + (i * oceanSize.x));
    const uint tileIndexZ = (indexZ + (j * oceanSize.y));
    const uint tileMeshIndex = tileIndexZ * meshSize.x + tileIndexX;

    mesh[tileMeshIndex].x = x + (i * oceanSize.x);
    mesh[tileMeshIndex].y = y;
    mesh[tileMeshIndex].z = z + (j * oceanSize.y);
  }
}
